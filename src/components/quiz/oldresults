import React, { useEffect, useState } from 'react';
import {
  Paper,
  Box,
  Typography,
  Button,
  CircularProgress,
  List,
  ListItem,
  ListItemText,
  Divider,
  Alert,
} from '@mui/material';
import type { QuizResult } from '../../types/api.types';
import { styled } from '@mui/material/styles';
import { feedbackMessages } from '../../data/feedback';
import apiClient from '../../services/apiClient';
import { getDeviceInfo, getTimeInfo, getLocation } from '../../utils/deviceInfo';
import { answerTranslationMap } from '../../utils/answerTranslations';

interface ResultsProps {
  answers: Record<string, string | number>;
  isArabic: boolean;
  onRestart: () => void;
  userName?: string;
}

const ScoreCircle = styled(Box)(({ theme }) => ({
  position: 'relative',
  display: 'inline-flex',
  marginBottom: theme.spacing(4),
}));

const Results: React.FC<ResultsProps> = ({ answers, isArabic, onRestart, userName }) => {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitError, setSubmitError] = useState<string | null>(null);
  const [submitted, setSubmitted] = useState(false);

  // Keep startTime as a constant across re-renders
  const startTime = React.useMemo(() => new Date(), []);

  // Calculate BMI
  const height = Number(answers.height) / 100; // Convert cm to meters
  const weight = Number(answers.weight);
  const bmi = weight / (height * height);
  
  // Calculate overall score (out of 100)
  const calculateScore = () => {
    let totalScore = 100;
    
    // BMI scoring (max deduction: 20 points)
    if (bmi < 18.5 || bmi >= 30) totalScore -= 20;
    else if (bmi < 18.5 || bmi >= 25) totalScore -= 10;
    
    // Sleep scoring (max deduction: 15 points)
    const sleep = Number(answers.sleepHours);
    if (sleep < 5 || sleep > 10) totalScore -= 15;
    else if (sleep < 6 || sleep > 9) totalScore -= 7;
    
    // Activity scoring (max deduction: 15 points)
    if (answers.activityDays === "0 days" || answers.activityDays === "0 أيام") totalScore -= 15;
    else if (answers.activityDays === "1-2 days" || answers.activityDays === "1-2 يوم") totalScore -= 10;
    else if (answers.activityDays === "3-4 days" || answers.activityDays === "3-4 يوم") totalScore -= 5;
    
    // Nutrition scoring (max deduction: 15 points)
    if (answers.nutritionServings === "0 servings" || answers.nutritionServings === "0 حصص") totalScore -= 15;
    else if (answers.nutritionServings === "1-2 servings" || answers.nutritionServings === "1-2 حصة") totalScore -= 10;
    else if (answers.nutritionServings === "3-4 servings" || answers.nutritionServings === "3-4 حصص") totalScore -= 5;
    
    // Lifestyle factors (max deduction: 35 points)
    // Smoking
    if (answers.smoking === "Regularly" || answers.smoking === "بانتظام") totalScore -= 10;
    else if (answers.smoking === "Occasionally" || answers.smoking === "أحياناً") totalScore -= 5;
    
    // Stress
    if (answers.stress === "High" || answers.stress === "Very High" ||
        answers.stress === "مرتفع" || answers.stress === "مرتفع جداً") totalScore -= 5;
    
    // Water intake
    if (answers.water === "Less than 1 liter" || answers.water === "أقل من 1 لتر") totalScore -= 5;
    
    // Fast food
    if (answers.fastFood === "1-2 times per week" || answers.fastFood === "1-2 مرة في الأسبوع") totalScore -= 3;
    else if (answers.fastFood === "3 or more times per week" || answers.fastFood === "3 مرات أو أكثر في الأسبوع") totalScore -= 5;
    
    // Coffee
    if (answers.coffee === "4 or more cups" || answers.coffee === "4 فناجين أو أكثر") totalScore -= 5;
    
    // Energy drinks
    if (answers.energyDrinks === "Weekly (1–3 times per week)" || answers.energyDrinks === "أسبوعياً (1-3 مرات في الأسبوع)") totalScore -= 3;
    else if (answers.energyDrinks === "Daily or almost daily" || answers.energyDrinks === "يومياً أو تقريباً يومياً") totalScore -= 5;
    
    return Math.max(0, Math.min(100, Math.round(totalScore)));
  };

  const score = calculateScore();
  const lang = isArabic ? 'ar' : 'en';

  const translateAnswersToEnglish = (originalAnswers: Record<string, string | number>) => {
  const translated: Record<string, string | number> = {};
  for (const key in originalAnswers) {
    const value = originalAnswers[key];
    if (typeof value === 'string') {
      translated[key] = answerTranslationMap[value] || value;
    } else {
      translated[key] = value;
    }
  }
  return translated;
};


  // Submit results to backend
  useEffect(() => {
    const submitResults = async () => {
      if (submitted) return;
      
      try {
        setIsSubmitting(true);
        setSubmitError(null);

        const deviceInfo = getDeviceInfo();
        const location = await getLocation().catch(() => null); // Fallback if location access fails
        const timeInfo = getTimeInfo(startTime);
        const translatedAnswers = translateAnswersToEnglish(answers);
        const result: QuizResult = {
          deviceInfo,
          location,
          timeInfo,
          testInfo: {
            language: isArabic ? 'ar' as const : 'en' as const,
            theme: 'light' as const,
            score,
            bmi,
          },
          answers: translatedAnswers,
        };

        // Try submitting results
        await apiClient.submitQuizResult(result);
        setSubmitted(true);

        // If successful and offline queue exists, try to submit those too
        const { networkQueue } = await import('../../services/networkQueue');
        const queuedItems = networkQueue.getQueue();
        
        if (queuedItems.length > 0 && navigator.onLine) {
          for (const item of queuedItems) {
            try {
              await apiClient.submitQuizResult(item.data);
              networkQueue.removeFromQueue(item.timestamp);
            } catch (error) {
              console.error('Failed to submit queued result:', error);
            }
          }
        }
      } catch (error) {
        console.error('Failed to submit results:', error);
        if (!navigator.onLine) {
          setSubmitError(
            isArabic
              ? 'لا يوجد اتصال بالإنترنت. سيتم حفظ نتائجك وإرسالها عند استعادة الاتصال.'
              : 'No internet connection. Your results will be saved and submitted when you\'re back online.'
          );
        } else {
          setSubmitError(
            isArabic
              ? 'حدث خطأ أثناء حفظ النتائج. سنحاول مرة أخرى.'
              : 'An error occurred while saving results. We\'ll try again.'
          );
        }
      } finally {
        setIsSubmitting(false);
      }
    };

    submitResults();
  }, [submitted, isArabic, score, bmi, answers]);

  // Get BMI feedback
  const getBMIFeedback = () => {
    if (bmi < 18.5) return feedbackMessages[lang].bmi.underweight;
    if (bmi >= 30) return feedbackMessages[lang].bmi.obese;
    if (bmi >= 25) return feedbackMessages[lang].bmi.overweight;
    return feedbackMessages[lang].bmi.normal;
  };

  // Get sleep feedback
  const getSleepFeedback = () => {
    const sleep = Number(answers.sleepHours);
    if (sleep < 6) return feedbackMessages[lang].sleep.poor;
    if (sleep < 7) return feedbackMessages[lang].sleep.moderate;
    return feedbackMessages[lang].sleep.good;
  };

  // Get activity feedback
  const getActivityFeedback = () => {
    const activity = answers.activityDays;
    if (activity === "0 days" || activity === "0 أيام") return feedbackMessages[lang].activity.poor;
    if (activity === "1-2 days" || activity === "1-2 يوم" ||
        activity === "3-4 days" || activity === "3-4 أيام") return feedbackMessages[lang].activity.moderate;
    return feedbackMessages[lang].activity.good;
  };

  // Get nutrition feedback
  const getNutritionFeedback = () => {
    const nutrition = answers.nutritionServings;
    if (nutrition === "0 servings" || nutrition === "0 حصص") return feedbackMessages[lang].nutrition.poor;
    if (nutrition === "1-2 servings" || nutrition === "1-2 حصة" ||
        nutrition === "3-4 servings" || nutrition === "3-4 حصص") return feedbackMessages[lang].nutrition.moderate;
    return feedbackMessages[lang].nutrition.good;
  };

  // Get lifestyle feedback list
  const getLifestyleFeedback = () => {
    const feedback: string[] = [];
    
    // Smoking
    if (answers.smoking === "Regularly" || answers.smoking === "بانتظام" ||
        answers.smoking === "Occasionally" || answers.smoking === "أحياناً") {
      feedback.push(feedbackMessages[lang].lifestyle.smoking);
    }
    
    // Stress
    if (answers.stress === "High" || answers.stress === "Very High" || 
        answers.stress === "مرتفع" || answers.stress === "مرتفع جداً") {
      feedback.push(feedbackMessages[lang].lifestyle.stress);
    }
    
    // Water
    if (answers.water === "Less than 1 liter" || answers.water === "أقل من 1 لتر") {
      feedback.push(feedbackMessages[lang].lifestyle.water);
    }
    
    // Fast food
    if (answers.fastFood === "1-2 times per week" || answers.fastFood === "3 or more times per week" ||
        answers.fastFood === "1-2 مرة في الأسبوع" || answers.fastFood === "3 مرات أو أكثر في الأسبوع") {
      feedback.push(feedbackMessages[lang].lifestyle.fastFood);
    }
    
    // Coffee
    if (answers.coffee === "4 or more cups" || answers.coffee === "4 فناجين أو أكثر") {
      feedback.push(feedbackMessages[lang].lifestyle.coffee);
    }
    
    // Energy drinks
    if (answers.energyDrinks === "Weekly (1–3 times per week)" || answers.energyDrinks === "Daily or almost daily" ||
        answers.energyDrinks === "أسبوعياً (1-3 مرات في الأسبوع)" || answers.energyDrinks === "يومياً أو تقريباً يومياً") {
      feedback.push(feedbackMessages[lang].lifestyle.energyDrinks);
    }
    
    return feedback.length > 0 ? feedback : [feedbackMessages[lang].lifestyle.good];
  };

  return (
    <Box sx={{ maxWidth: 'lg', mx: 'auto', p: 2 }}>
      <Paper sx={{ p: 3 }} className="fade-in">
        {submitError && (
          <Alert severity="error" sx={{ mb: 2 }}>
            {submitError}
          </Alert>
        )}
        
        <Box sx={{ textAlign: 'center', mb: 4 }}>
          <Typography variant="h4" component="h1" gutterBottom>
            {isArabic 
              ? `نتائج التقييم الصحي${userName ? ` ل${userName}` : ''}`
              : `Health Assessment Results${userName ? ` for ${userName}` : ''}`
            }
          </Typography>
          
          <ScoreCircle>
            <CircularProgress
              variant="determinate"
              value={score}
              size={160}
              thickness={6}
              sx={{
                color: (theme) => theme.palette.primary.main,
                transform: 'rotate(-90deg) !important',
                '& .MuiCircularProgress-circle': {
                  strokeLinecap: 'round',
                },
              }}
            />
            <Box
              sx={{
                top: 0,
                left: 0,
                bottom: 0,
                right: 0,
                position: 'absolute',
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
                justifyContent: 'center',
              }}
            >
              <Typography variant="h3" component="div" color="primary" sx={{ fontWeight: 'bold', mb: -1 }}>
                {score}
              </Typography>
              <Typography variant="subtitle2" color="text.secondary">
                {isArabic ? 'من 100' : 'out of 100'}
              </Typography>
            </Box>
          </ScoreCircle>
        </Box>

        <List>
          <ListItem>
            <ListItemText
              primary={isArabic ? 'مؤشر كتلة الجسم' : 'BMI'}
              secondary={`${bmi.toFixed(1)} - ${getBMIFeedback()}`}
            />
          </ListItem>
          <Divider />
          
          <ListItem>
            <ListItemText
              primary={isArabic ? 'النوم' : 'Sleep'}
              secondary={getSleepFeedback()}
            />
          </ListItem>
          <Divider />
          
          <ListItem>
            <ListItemText
              primary={isArabic ? 'النشاط البدني' : 'Physical Activity'}
              secondary={getActivityFeedback()}
            />
          </ListItem>
          <Divider />
          
          <ListItem>
            <ListItemText
              primary={isArabic ? 'التغذية' : 'Nutrition'}
              secondary={getNutritionFeedback()}
            />
          </ListItem>
          <Divider />
          
          <ListItem>
            <Box sx={{ width: '100%' }}>
              <Typography variant="body1" color="text.primary" gutterBottom>
                {isArabic ? 'نمط الحياة' : 'Lifestyle'}
              </Typography>
              {getLifestyleFeedback().map((feedback, index) => (
                <Typography
                  key={index}
                  variant="body2"
                  color="text.secondary"
                  sx={{ mt: index > 0 ? 1 : 0 }}
                >
                  {feedback}
                </Typography>
              ))}
            </Box>
          </ListItem>
        </List>

        <Box sx={{ mt: 4, textAlign: 'center' }}>
          <Button
            onClick={onRestart}
            variant="contained"
            color="primary"
            size="large"
            disabled={isSubmitting}
          >
            {isSubmitting ? (
              isArabic ? 'جارٍ الحفظ...' : 'Saving...'
            ) : (
              isArabic ? 'إعادة التقييم' : 'Take Quiz Again'
            )}
          </Button>
        </Box>
      </Paper>
    </Box>
  );
};

export default Results;