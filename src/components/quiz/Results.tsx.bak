import React, { useEffect, useState } from 'react';
import {
  Paper,
  Box,
  Typography,
  Button,
  CircularProgress,
  List,
  ListItem,
  ListItemText,
  Divider,
  Alert,
} from '@mui/material';
import { styled } from '@mui/material/styles';
import { feedbackMessages } from '../../data/feedback';
import { submitResult } from '../../services/api';
import { getLocation } from '../../utils/deviceInfo';

interface ResultsProps {
  answers: Record<string, string | number>;
  isArabic: boolean;
  onRestart: () => void;
  userName?: string;
}

const ScoreCircle = styled(Box)(({ theme }) => ({
  position: 'relative',
  display: 'inline-flex',
  marginBottom: theme.spacing(4),
}));

const Results: React.FC<ResultsProps> = ({ answers, isArabic, onRestart, userName }) => {
  const [location, setLocation] = useState<{
    country?: string;
    city?: string;
    latitude?: number;
    longitude?: number;
  } | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Get location once
  React.useEffect(() => {
    const askForLocation = async () => {
      try {
        if (window.confirm(isArabic 
          ? 'هل تسمح لنا بالوصول إلى موقعك؟'
          : 'Would you like to share your location?'
        )) {
          const locationData = await getLocation();
          setLocation(locationData || null);
        }
      } catch (error) {
        console.error('Location error:', error);
      }
    };

    askForLocation();
  }, [isArabic]);

  // Calculate BMI
  const height = Number(answers.height) / 100; // Convert cm to meters
  const weight = Number(answers.weight);
  const bmi = weight / (height * height);
  
  // Calculate overall score (out of 100)
  const calculateScore = () => {
    let score = 100;
    
    // BMI scoring (max deduction: 20 points)
    if (bmi < 18.5 || bmi >= 30) score -= 20;
    else if (bmi < 18.5 || bmi >= 25) score -= 10;
    
    // Sleep scoring (max deduction: 15 points)
    const sleep = Number(answers.sleepHours);
    if (sleep < 5 || sleep > 10) score -= 15;
    else if (sleep < 6 || sleep > 9) score -= 7;
    
    // Activity scoring (max deduction: 15 points)
    if (answers.activityDays === '0 days') score -= 15;
    else if (answers.activityDays === '1-2 days') score -= 10;
    else if (answers.activityDays === '3-4 days') score -= 5;
    
    // Nutrition scoring (max deduction: 15 points)
    if (answers.nutritionServings === '0 servings') score -= 15;
    else if (answers.nutritionServings === '1-2 servings') score -= 10;
    else if (answers.nutritionServings === '3-4 servings') score -= 5;
    
    // Lifestyle factors (max deduction: 35 points)
    // Smoking
    if (answers.smoking === 'Regularly' || answers.smoking === 'بانتظام') score -= 10;
    else if (answers.smoking === 'Occasionally' || answers.smoking === 'أحياناً') score -= 5;
    
    // Stress
    if (answers.stress === 'High' || answers.stress === 'Very High' || 
        answers.stress === 'مرتفع' || answers.stress === 'مرتفع جداً') score -= 5;
    
    // Water intake
    if (answers.water === 'Less than 1 liter' || answers.water === 'أقل من 1 لتر') score -= 5;
    
    // Fast food
    if (answers.fastFood === '1-2 times per week' || answers.fastFood === '3 or more times per week' ||
        answers.fastFood === '1-2 مرة في الأسبوع' || answers.fastFood === '3 مرات أو أكثر في الأسبوع') score -= 5;
    
    // Coffee
    if (answers.coffee === '4 or more cups' || answers.coffee === '4 فناجين أو أكثر') score -= 5;
    
    // Energy drinks
    if (answers.energyDrinks === 'Weekly (1–3 times per week)' || answers.energyDrinks === 'Daily or almost daily' ||
        answers.energyDrinks === 'أسبوعياً (1-3 مرات في الأسبوع)' || answers.energyDrinks === 'يومياً أو تقريباً يومياً') score -= 5;
    
    return Math.max(0, Math.round(score));
  };

  const score = calculateScore();
  const lang = isArabic ? 'ar' : 'en';
  
  // Get BMI category and feedback
  const getBMIFeedback = () => {
    if (bmi < 18.5) return feedbackMessages[lang].bmi.underweight;
    if (bmi >= 30) return feedbackMessages[lang].bmi.obese;
    if (bmi >= 25) return feedbackMessages[lang].bmi.overweight;
    return feedbackMessages[lang].bmi.normal;
  };
  
  // Get sleep feedback
  const getSleepFeedback = () => {
    const sleep = Number(answers.sleepHours);
    if (sleep < 6) return feedbackMessages[lang].sleep.poor;
    if (sleep < 7) return feedbackMessages[lang].sleep.moderate;
    return feedbackMessages[lang].sleep.good;
  };
  
  // Get activity feedback
  const getActivityFeedback = () => {
    const activity = answers.activityDays;
    if (activity === "0 days" || activity === "0 أيام") return feedbackMessages[lang].activity.poor;
    if (activity === "1-2 days" || activity === "1-2 يوم" ||
        activity === "3-4 days" || activity === "3-4 أيام") return feedbackMessages[lang].activity.moderate;
    return feedbackMessages[lang].activity.good;
  };
  
  // Get nutrition feedback
  const getNutritionFeedback = () => {
    const nutrition = answers.nutritionServings;
    if (nutrition === "0 servings" || nutrition === "0 حصص") return feedbackMessages[lang].nutrition.poor;
    if (nutrition === "1-2 servings" || nutrition === "1-2 حصة" ||
        nutrition === "3-4 servings" || nutrition === "3-4 حصص") return feedbackMessages[lang].nutrition.moderate;
    return feedbackMessages[lang].nutrition.good;
  };

  // Get lifestyle feedback list
  const getLifestyleFeedback = () => {
    const feedback: string[] = [];
    
    // Smoking
    if (answers.smoking === "Regularly" || answers.smoking === "بانتظام" ||
        answers.smoking === "Occasionally" || answers.smoking === "أحياناً") {
      feedback.push(feedbackMessages[lang].lifestyle.smoking);
    }
    
    // Stress
    if (answers.stress === "High" || answers.stress === "Very High" || 
        answers.stress === "مرتفع" || answers.stress === "مرتفع جداً") {
      feedback.push(feedbackMessages[lang].lifestyle.stress);
    }
    
    // Water
    if (answers.water === "Less than 1 liter" || answers.water === "أقل من 1 لتر") {
      feedback.push(feedbackMessages[lang].lifestyle.water);
    }
    
    // Fast food
    if (answers.fastFood === "1-2 times per week" || answers.fastFood === "3 or more times per week" ||
        answers.fastFood === "1-2 مرة في الأسبوع" || answers.fastFood === "3 مرات أو أكثر في الأسبوع") {
      feedback.push(feedbackMessages[lang].lifestyle.fastFood);
    }
    
    // Coffee
    if (answers.coffee === "4 or more cups" || answers.coffee === "4 فناجين أو أكثر") {
      feedback.push(feedbackMessages[lang].lifestyle.coffee);
    }
    
    // Energy drinks
    if (answers.energyDrinks === "Weekly (1–3 times per week)" || answers.energyDrinks === "Daily or almost daily" ||
        answers.energyDrinks === "أسبوعياً (1-3 مرات في الأسبوع)" || answers.energyDrinks === "يومياً أو تقريباً يومياً") {
      feedback.push(feedbackMessages[lang].lifestyle.energyDrinks);
    }
    
    return feedback.length > 0 ? feedback : [feedbackMessages[lang].lifestyle.good];
  };

  // Submit results
  useEffect(() => {
    const submitResults = async () => {
      if (isSubmitting) return;
      
      try {
        setIsSubmitting(true);
        setError(null);

        const result = {
          userName: userName,
          deviceInfo: {
            name: navigator.platform,
            ip: '',  // Will be set by backend
            userAgent: navigator.userAgent,
          },
          location: location || undefined,
          timeInfo: {
            startTime: new Date(),
            endTime: new Date(),
            duration: 0,
            timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
          },
          testInfo: {
            language: (isArabic ? 'ar' : 'en') as 'ar' | 'en',
            theme: 'light' as 'light' | 'dark',
            score,
            bmi,
          },
          answers,
        };

        await submitResult(result);
      } catch (err) {
        console.error('Failed to submit results:', err);
        setError(isArabic 
          ? 'حدث خطأ أثناء حفظ النتائج. الرجاء المحاولة مرة أخرى.'
          : 'Failed to save results. Please try again.'
        );
      } finally {
        setIsSubmitting(false);
      }
    };

    submitResults();
  }, [answers, bmi, isArabic, location, score]);

  return (
    <Box sx={{ maxWidth: 'lg', mx: 'auto', p: 2 }}>
      <Paper sx={{ p: 3 }} className="fade-in">
        {error && (
          <Alert severity="error" sx={{ mb: 2 }}>
            {error}
          </Alert>
        )}
        <Box sx={{ textAlign: 'center', mb: 4 }}>
          <Typography variant="h4" component="h1" gutterBottom>
            {isArabic 
              ? `نتائج التقييم الصحي${userName ? ` ل${userName}` : ''}`
              : `Health Assessment Results${userName ? ` for ${userName}` : ''}`
            }
          </Typography>
          
          <ScoreCircle>
            <CircularProgress
              variant="determinate"
              value={score}
              size={160}
              thickness={6}
              sx={{
                color: (theme) => theme.palette.primary.main,
                transform: 'rotate(-90deg) !important',
                '& .MuiCircularProgress-circle': {
                  strokeLinecap: 'round',
                },
              }}
            />
            <Box
              sx={{
                top: 0,
                left: 0,
                bottom: 0,
                right: 0,
                position: 'absolute',
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
                justifyContent: 'center',
              }}
            >
              <Typography variant="h3" component="div" color="primary" sx={{ fontWeight: 'bold', mb: -1 }}>
                {score}
              </Typography>
              <Typography variant="subtitle2" color="text.secondary">
                {isArabic ? 'من 100' : 'out of 100'}
              </Typography>
            </Box>
          </ScoreCircle>
        </Box>

        <List>
          <ListItem>
            <ListItemText
              primary={isArabic ? 'مؤشر كتلة الجسم' : 'BMI'}
              secondary={`${bmi.toFixed(1)} - ${getBMIFeedback()}`}
            />
          </ListItem>
          <Divider />
          
          <ListItem>
            <ListItemText
              primary={isArabic ? 'النوم' : 'Sleep'}
              secondary={getSleepFeedback()}
            />
          </ListItem>
          <Divider />
          
          <ListItem>
            <ListItemText
              primary={isArabic ? 'النشاط البدني' : 'Physical Activity'}
              secondary={getActivityFeedback()}
            />
          </ListItem>
          <Divider />
          
          <ListItem>
            <ListItemText
              primary={isArabic ? 'التغذية' : 'Nutrition'}
              secondary={getNutritionFeedback()}
            />
          </ListItem>
          <Divider />
          
          <ListItem>
            <ListItemText
              primary={isArabic ? 'نمط الحياة' : 'Lifestyle'}
              secondary={
                <List disablePadding>
                  {getLifestyleFeedback().map((feedback, index) => (
                    <ListItem key={index} sx={{ pl: 0 }}>
                      <ListItemText secondary={feedback} />
                    </ListItem>
                  ))}
                </List>
              }
            />
          </ListItem>
        </List>

        <Box sx={{ mt: 4, textAlign: 'center' }}>
          <Button
            onClick={onRestart}
            variant="contained"
            color="primary"
            size="large"
            disabled={isSubmitting}
          >
            {isSubmitting 
              ? (isArabic ? 'جارٍ الحفظ...' : 'Saving...')
              : (isArabic ? 'إعادة التقييم' : 'Take Quiz Again')
            }
          </Button>
        </Box>
      </Paper>
    </Box>
  );
};

export default Results;
