import { answerTranslationMap } from '../utils/answerTranslations';

const API_URL = process.env.NODE_ENV === 'production' 
  ? 'https://your-production-api.com/api'  // TODO: Update with your production API URL
  : 'http://localhost:5000/api';

// Log API configuration
console.log('API URL:', API_URL);

export interface ResultSubmission {
  userName?: string;
  deviceInfo: {
    name: string;
    ip: string;
    userAgent: string;
  };
  location?: {
    country?: string;
    city?: string;
    latitude?: number;
    longitude?: number;
  };
  timeInfo: {
    startTime: Date;
    endTime: Date;
    duration: number;
    timezone: string;
  };
  testInfo: {
    language: 'en' | 'ar';
    theme: 'light' | 'dark';
    score: number;
    bmi?: number;
  };
  answers: Record<string, any>;
}

const translateAnswersToEnglish = (originalAnswers: Record<string, string | number>) => {
  const translated: Record<string, string | number> = {};
  for (const key in originalAnswers) {
    const value = originalAnswers[key];
    if (typeof value === 'string') {
      translated[key] = answerTranslationMap[value] || value;
    } else {
      translated[key] = value;
    }
  }
  return translated;
};

export const submitResult = async (data: ResultSubmission): Promise<any> => {
  console.log('Submitting result to:', `${API_URL}/results`);
  console.log('Data being sent:', JSON.stringify(data, null, 2));

  // If the test was in Arabic, translate answers to English
  if (data.testInfo.language === 'ar') {
    data = {
      ...data,
      answers: translateAnswersToEnglish(data.answers)
    };
  }

  try {
    const response = await fetch(`${API_URL}/results`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      body: JSON.stringify(data),
    });

    let responseData;
    const contentType = response.headers.get("content-type");
    if (contentType && contentType.indexOf("application/json") !== -1) {
      responseData = await response.json();
    } else {
      const text = await response.text();
      console.error('Non-JSON response:', text);
      throw new Error('Invalid response format from server');
    }

    if (!response.ok) {
      console.error('API Error:', {
        status: response.status,
        statusText: response.statusText,
        data: responseData
      });
      throw new Error(responseData.message || `Server error: ${response.status}`);
    }

    console.log('API Response:', responseData);
    return responseData;
  } catch (error) {
    console.error('Submission Error:', {
      error,
      url: `${API_URL}/results`,
      data: data
    });
    throw error;
  }
};
